import tkinter as tk
from tkinter import messagebox, filedialog
from cryptography.fernet import Fernet
import os

class FernetFileApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Fernet File Encryption")
        self.master.geometry("400x200")
        
        self.step = 1  # Track the current step
        
        # Step 1: Key Generation
        self.label_key = tk.Label(master, text="Key:", font=("Helvetica", 12))
        self.label_key.grid(row=0, column=0, padx=5, pady=5)
        
        self.entry_key = tk.Entry(master, width=40, font=("Helvetica", 12))
        self.entry_key.grid(row=0, column=1, padx=5, pady=5)
        
        self.generate_key_button = tk.Button(master, text="Generate Key", command=self.generate_key, font=("Helvetica", 12))
        self.generate_key_button.grid(row=1, column=0, columnspan=2, padx=5, pady=5)
        
        self.encrypt_button = tk.Button(master, text="Encrypt File", command=self.encrypt_file, font=("Helvetica", 12))
        self.decrypt_button = tk.Button(master, text="Decrypt File", command=self.decrypt_file, font=("Helvetica", 12))
        
        self.encrypt_button.grid(row=2, column=0, padx=5, pady=5)
        self.decrypt_button.grid(row=2, column=1, padx=5, pady=5)
        
        self.encrypt_button.config(state="disabled", bg="lightgreen", fg="black")
        self.decrypt_button.config(state="disabled", bg="lightcoral", fg="black")
        
    def generate_key(self):
        # Generate a new Fernet key
        key = Fernet.generate_key()
        # Display the generated key in the entry field
        self.entry_key.delete(0, tk.END)
        self.entry_key.insert(0, key.decode())
        
        # Enable encryption and decryption buttons
        self.encrypt_button.config(state="normal")
        self.decrypt_button.config(state="normal")
        
        # Disable generate key button
        self.generate_key_button.config(state="disabled")
        
    def encrypt_file(self):
        try:
            key = bytes(self.entry_key.get(), 'utf-8')
            cipher_suite = Fernet(key)
            file_path = filedialog.askopenfilename()
            with open(file_path, 'rb') as f:
                file_data = f.read()
            encrypted_data = cipher_suite.encrypt(file_data)
            with open(file_path + ".enc", 'wb') as f:
                f.write(encrypted_data)
            os.remove(file_path)  # Delete the original file
            messagebox.showinfo("Encryption Success", "File encrypted successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
            
    def decrypt_file(self):
        try:
            key = bytes(self.entry_key.get(), 'utf-8')
            cipher_suite = Fernet(key)
            file_path = filedialog.askopenfilename()
            with open(file_path, 'rb') as f:
                file_data = f.read()
            decrypted_data = cipher_suite.decrypt(file_data)
            with open(file_path[:-4], 'wb') as f:
                f.write(decrypted_data)
            os.remove(file_path)  # Delete the encrypted file
            messagebox.showinfo("Decryption Success", "File decrypted successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

def main():
    root = tk.Tk()
    app = FernetFileApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
